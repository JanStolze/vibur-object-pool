<wiki:comment>
  Copyright 2013 Simeon Malchev

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
</wiki:comment>

=== Table of Contents ===
  # [#Quick_Introduction Quick Introduction]
  # [#Usage_Examples Usage Examples]
  # [#Latest_Version_&_How_To_Build Latest Version & How To Build]

<br/>
=== Quick Introduction ===

Vibur Object Pool is a general-use concurrent Java object pool which provides
both non-validating and validating pool implementations. The pool is built
entirely using the standard Java concurrent utilities, does not use any direct synchronization,
and does not have any external dependencies. This pool is an excellent choice for pooling/caching
of expensive to create Java objects such as database connections, JMS connections/sessions and similar.

Vibur Object Pool is utilised by [https://code.google.com/p/vibur-dbcp/ Vibur DBCP]
(a JDBC connection pool).

==== Non-validating object pool: ====

The implementation of the non-validating object pool (`ConcurrentLinkedPool`)
is based on a `ConcurrentLinkedQueue` and a `Semaphore`. This pool does *not*
implement any validation of whether the currently restored object has been taken
before that from the pool, or whether the object is currently in taken state.

The non-validating object pool provides support for fairness with regards to the waiting
taker's threads. The creation of new objects in the pool and their lifecycle are controlled
by the provided during the pool's creation time `PoolObjectFactory`.

The non-validating object pool provides support for manual or automated shrinking (reduction)
of the number of allocated on the pool objects, and the developer has full control over it
via the `reduceCreated(int)` pool method and the `SamplingPoolReducer` util class.

==== Validating object pool: ====

The implementation of the validating object pool (`ConcurrentHolderLinkedPool`)
is built (composed) using a non-validating `ConcurrentLinkedPool` and is utilising
a `ConcurrentHashMap` for the validation of the restored objects. The validation checks
whether the currently restored object holder has been taken before that from the pool,
and whether it is currently in taken state.

The validating object pool `take` methods are returning the pool's objects enclosed
in a thin wrapper class implementing the `Holder` interface. The underlying object is
accessible via the interface's `value()` method.

The validating object pool provides support for fairness with regards to the waiting
taker's threads in the same way as it is provided by the underlying `ConcurrentLinkedPool`.

The validating object pool has support for for manual or automated shrinking (reduction)
of the number of allocated on the pool objects. Again, this functionality is built on
top of the same provided by the underlying `ConcurrentLinkedPool`.

=== Usage Examples ===

==== Maven dependency: ====

  * coming soon...

{{{
HolderValidatingPoolService<Object> chlp = new ConcurrentHolderLinkedPool<Object>(
        new SimpleObjectFactory(), 10, 60, false);
Holder<Object> hobj = null;
try {
    hobj = chlp.tryTake();

    // do some work and use hobj.value()

} finally {
    if (hobj != null)
        chlp.restore(hobj);
}
}}}

More usage examples can be found in the project's unit tests folder.

=== Latest Version & How To Build ===

Vibur Object Pool latest version is 0.8.8. Maven dependency example for it is shown [#Maven_dependency: here].
A read-only copy of the source code can be checked out via:

  `svn checkout http://vibur-object-pool.googlecode.com/svn/tags/0.8.8 vibur-object-pool-0.8.8`

Building it is simply a matter of executing:

  `mvn clean install`
